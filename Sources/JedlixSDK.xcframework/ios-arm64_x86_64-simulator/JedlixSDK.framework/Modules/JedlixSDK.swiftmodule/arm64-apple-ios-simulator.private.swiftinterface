// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name JedlixSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import JedlixSDK
import Swift
import SwiftUI
import WebKit
import _Concurrency
import _StringProcessing
public enum DismissButtonStyle : Swift.String {
  case back
  case close
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Foundation.URLSession {
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  public func response(for request: Foundation.URLRequest, delegate: (any Foundation.URLSessionTaskDelegate)? = nil) async throws -> (Foundation.Data, Foundation.URLResponse)
  #endif
}
@_Concurrency.MainActor(unsafe) public struct ConnectSessionView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(userIdentifier: Swift.String, sessionType: JedlixSDK.ConnectSessionType, onConnectionFinished: @escaping (JedlixSDK.ConnectSessionResult) -> Swift.Void = { _ in })
  @_Concurrency.MainActor(unsafe) public init(userIdentifier: Swift.String, vehicleIdentifier: Swift.String, onConnectionFinished: @escaping (JedlixSDK.ConnectSessionResult) -> Swift.Void = { _ in })
  @_Concurrency.MainActor(unsafe) public init(userIdentifier: Swift.String, sessionIdentifier: Swift.String, onConnectionFinished: @escaping (JedlixSDK.ConnectSessionResult) -> Swift.Void = { _ in })
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9JedlixSDK18ConnectSessionViewV4bodyQrvp", 0) __
}
public struct RedirectInfo : Swift.Codable {
  public let includeBody: Swift.Bool
  public let includeCookies: [Swift.String]
  public let includeRedirectUrl: Swift.Bool
  public init(includeBody: Swift.Bool = false, includeCookies: [Swift.String] = [], includeRedirectUrl: Swift.Bool = false)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Info : Swift.Codable {
  public let body: Swift.String?
  public let bodyError: Swift.String?
  public let cookies: [Swift.String : Swift.String]
  public let redirectUrl: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol ConnectSessionDescriptor : Swift.Decodable, Swift.Encodable {
  var id: Swift.String { get }
  var isFinished: Swift.Bool { get }
  var startUrl: Swift.String? { get }
  var redirectUrl: Swift.String? { get }
  var redirectInfo: JedlixSDK.RedirectInfo? { get }
}
public struct ConnectSession : JedlixSDK.ConnectSessionDescriptor {
  public let id: Swift.String
  public let isFinished: Swift.Bool
  public let startUrl: Swift.String?
  public let redirectUrl: Swift.String?
  public let redirectInfo: JedlixSDK.RedirectInfo?
  public init(id: Swift.String, isFinished: Swift.Bool, startUrl: Swift.String? = nil, redirectUrl: Swift.String? = nil, redirectInfo: JedlixSDK.RedirectInfo? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VehicleConnectSession : JedlixSDK.ConnectSessionDescriptor {
  public let id: Swift.String
  public let vehicleId: Swift.String?
  public let isFinished: Swift.Bool
  public let startUrl: Swift.String?
  public let redirectUrl: Swift.String?
  public let redirectInfo: JedlixSDK.RedirectInfo?
  public init(id: Swift.String, vehicleId: Swift.String?, isFinished: Swift.Bool, startUrl: Swift.String? = nil, redirectUrl: Swift.String? = nil, redirectInfo: JedlixSDK.RedirectInfo? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ChargerConnectSession : JedlixSDK.ConnectSessionDescriptor {
  public let id: Swift.String
  public let chargerId: Swift.String?
  public let chargingLocationId: Swift.String
  public let isFinished: Swift.Bool
  public let startUrl: Swift.String?
  public let redirectUrl: Swift.String?
  public let redirectInfo: JedlixSDK.RedirectInfo?
  public init(id: Swift.String, chargerId: Swift.String?, chargingLocationId: Swift.String, isFinished: Swift.Bool, startUrl: Swift.String? = nil, redirectUrl: Swift.String? = nil, redirectInfo: JedlixSDK.RedirectInfo? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ConnectSessionType {
  case vehicle
  case charger(chargingLocationId: Swift.String)
}
public enum HTTPError : Swift.Error, Foundation.LocalizedError {
  case notAuthenticated
  case invalidResponse
  case errorResponse(title: Swift.String? = nil, detail: Swift.String)
  public var errorDescription: Swift.String? {
    get
  }
  public init(with data: Foundation.Data) throws
}
public struct HTTPErrorResponse : Swift.Codable {
  public let title: Swift.String
  public let detail: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ConnectSessionResult {
  case finished(sessionId: Swift.String)
  case inProgress(sessionId: Swift.String)
  case notStarted
}
public var isConfigured: Swift.Bool {
  get
}
public func configure(baseURL: Foundation.URL, apiKey: Swift.String? = nil, authentication: any JedlixSDK.Authentication)
#if compiler(>=5.3) && $AsyncAwait
public func getVehicleConnectSessions(userId: Swift.String) async throws -> [JedlixSDK.VehicleConnectSession]
#endif
#if compiler(>=5.3) && $AsyncAwait
public func getChargerConnectSessions(userId: Swift.String) async throws -> [JedlixSDK.ChargerConnectSession]
#endif
public protocol Authentication {
  #if compiler(>=5.3) && $AsyncAwait
  func getAccessToken() async -> Swift.String?
  #endif
}
extension JedlixSDK.DismissButtonStyle : Swift.Equatable {}
extension JedlixSDK.DismissButtonStyle : Swift.Hashable {}
extension JedlixSDK.DismissButtonStyle : Swift.RawRepresentable {}
